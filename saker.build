global(VERSION_saker.clang) = "0.8.0"
global(DEPENDENCIES_saker.clang) = [
	saker.standard, 
	saker.compiler.utils,
	saker.sdk.support,
	saker.process-api,
]

static(VERSION_saker.build) = nest.dependency.resolve(
	saker.build,
	Filters: nest.dependency.filter.kind([]),
)[Bundles][0][BundleIdentifier][VersionNumber]
static(VERSION_saker.nest) = nest.dependency.resolve(
	saker.nest,
	Filters: nest.dependency.filter.kind([]),
)[Bundles][0][BundleIdentifier][VersionNumber]

compile(
	out javac,
) {
	$resolveddependencies = nest.dependency.resolve(
		global(DEPENDENCIES_saker.clang),
		Filters: nest.dependency.filter.compile(CompileTransitive: false)
	)
	$javac = saker.java.compile(
		SourceDirectories: [
			src/main/
		],
		ClassPath: [
			saker.java.classpath.bundle([
				"saker.nest-api-v{ static(VERSION_saker.nest) }",
				"saker.build-api-v{ static(VERSION_saker.build) }"
			]),
			saker.java.classpath.bundle($resolveddependencies),
		],
		Identifier: "saker.clang",	
	)
}
export(
	in compile = include(compile),
	out compile,
	out mainjar,
	out apijar,
	out impljar,
	out sourcejar,
	
	out bundlepaths = [
		$mainjar[Path],
		$apijar[Path],
		$impljar[Path],
		$sourcejar[Path],
	]
) {
	$mainjar = saker.jar.create(
		Output: saker.clang.jar,
		Resources: [
			{
				Directory: $compile[javac][ClassDirectory],
				Resources: saker/clang/main/**,
			},
			{
				Directory: main/resources/,
				Resources: **,
			},
		],
		Manifest: {
			MainAttributes: {
				Nest-Bundle-Format-Version: 1,
				Nest-Bundle-Identifier: "saker.clang-v{ global(VERSION_saker.clang) }",
				Nest-Bundle-Source: "saker.clang-sources-v{ global(VERSION_saker.clang) }",
			},
		},
	)
	$apijar = saker.jar.create(
		Output: saker.clang-api.jar,
		Resources: [
			{
				Directory: $compile[javac][ClassDirectory],
				Resources: saker/clang/api/**,
			},
			{
				Directory: api/resources/,
				Resources: **,
			},
		],
		Manifest: {
			MainAttributes: {
				Nest-Bundle-Format-Version: 1,
				Nest-Bundle-Identifier: "saker.clang-api-v{ global(VERSION_saker.clang) }",
				Nest-Bundle-Source: "saker.clang-sources-v{ global(VERSION_saker.clang) }",
			},
		},
	)
	$impljar = saker.jar.create(
		Output: saker.clang-impl.jar,
		Resources: [
			{
				Directory: $compile[javac][ClassDirectory],
				Resources: saker/clang/impl/**,
			},
			{
				Directory: impl/resources/,
				Resources: **,
			},
			{
				Files: LICENSE,
				TargetDirectory: META-INF,
			},
		],
		Manifest: {
			MainAttributes: {
				Nest-Bundle-Format-Version: 1,
				Nest-Bundle-Identifier: "saker.clang-impl-v{ global(VERSION_saker.clang) }",
				Nest-Bundle-Source: "saker.clang-sources-v{ global(VERSION_saker.clang) }",
			},
		},
	)
	$sourcejar = saker.jar.create(
		Output: saker.clang-sources.jar,
		Resources: [
			{
				Directory: [src/main/],
				Resources: [**/*.java],
			},
			{
				Files: LICENSE,
				TargetDirectory: META-INF,
			},
		],
		Manifest: {
			MainAttributes: {
				Nest-Bundle-Format-Version: 1,
				Nest-Bundle-Identifier: "saker.clang-sources-v{ global(VERSION_saker.clang) }",
			},
		},
	)
}